<?php

require_once(__DIR__ . '/../config/database.php');


/* VÃ©rification si le formulaire a Ã©tÃ© envoyÃ© */
class UserController {

public function adminUsers() {
    // Connexion Ã  la base de donnÃ©es via la fonction connectDB()
    $db = connectDB();

    // VÃ©rification si la connexion Ã  Ã©chouÃ©
    if (!$db) {
        echo "Connexion Ã  la base de donnÃ©es Ã©chouÃ©e.";
        return;
    }

    try {

        // Execution de la requÃªte SQL pour rÃ©cupÃ©rer tous les utilisateurs
        $stmt = $db->query("SELECT id, firstname, lastname, email, credits, created_at FROM users");

        // On rÃ©cupÃ¨re les rÃ©sultats dans un tableau associatif
        $users = $stmt->fetchAll(PDO::FETCH_ASSOC);


        // Chargement de la vue qui affichera le tableau HTML
        require 'views/admin_users.php';
    } catch (PDOException $e) {
        // Affichage d'un message en cas d'erreur SQL
        echo "Erreur lors de la rÃ©cupÃ©ration des utilisateurs : " . $e->getMessage();
        $users = []; // Pour Ã©viter une erreur si la variable est utilisÃ©e dans la vue
        require 'views/admin_users.php';
    }
}

public function register() {
    $error = '';
    $success = '';

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
        $firstname = trim($_POST['firstname'] ?? '');
        $lastname  = trim($_POST['lastname'] ?? '');
        $email     = trim($_POST['email'] ?? '');
        $password  = $_POST['password'] ?? '';

        $db = connectDB();
        if (!$db) {
            $error = "Connexion Ã  la base de donnÃ©es Ã©chouÃ©e.";
        } else {
            try {
                // VÃ©rifier si l'email existe dÃ©jÃ 
                $check = $db->prepare("SELECT id FROM users WHERE email = ?");
                $check->execute([$email]);

                if ($check->rowCount() > 0) {
                    $error = "Cet email est dÃ©jÃ  utilisÃ©. Veuillez en choisir un autre.";
                } else {
                    // Hasher le mot de passe
                    $hash = password_hash($password, PASSWORD_DEFAULT);

                    // InsÃ©rer le nouvel utilisateur
                    $stmt = $db->prepare("INSERT INTO users (firstname, lastname, email, password) VALUES (?, ?, ?, ?)");
                    $stmt->execute([$firstname, $lastname, $email, $hash]);

                    $success = "Inscription rÃ©ussie ! Bienvenue, $firstname ðŸŽ‰";
                }
            } catch (PDOException $e) {
                $error = "Erreur lors de l'inscription : " . $e->getMessage();
            }
        }
    }

    require __DIR__ . '/../views/register.php';
    }

    public function login() {
        $error = '';

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $email = trim($_POST['email'] ?? '');
            $password = $_POST['password'] ?? '';

            $db = connectDB();
            if (!$db) {
                $error = "Connexion Ã  la base de donnÃ©es Ã©chouÃ©e.";
            } else {
                try {
                    $stmt = $db->prepare("SELECT * FROM users WHERE email = ?");
                    $stmt->execute([$email]);
                    $user = $stmt->fetch(PDO::FETCH_ASSOC);

                    if ($user && password_verify($password, $user['password'])) {
                        // DÃ©marrer la session
                        session_start();
                        $_SESSION['user_id'] = $user['id'];
                        $_SESSION['firstname'] = $user['firstname'];
                        $_SESSION['email'] = $user['email'];

                        // ReconnaÃ®tre un employÃ©
                        $_SESSION['is_employee'] = $user['is_employee'] ?? 0;
                        $_SESSION['is_admin'] = $user['is_admin'] ?? 0;

                        // Rediriger vers la page d'accueil ou tableau de bord
                        header('Location: index.php?page=home');
                        exit;
                    } else {
                        $error = "Identifiants inccorects.";
                    }
                }   catch (PDOException $e) {
                    $error = "Erreur los de la connexion : " . $e->getMessage(); 
                }

            }
        }

        require 'views/login.php';
    }
    
    public function profile() {
        if (empty($_SESSION['user_id'])){
            header('Location: index.php?page=login');
            exit;
        }

        $db = connectDB();
        $user = null; // garantit que $user existe mÃªme en cas d'erreur
        $vehicles = [];
        $joinedTrips = [];

        try {
            // Chargement des infos utilisateur
            $stmt = $db->prepare("SELECT firstname, lastname, email, credits, is_driver FROM users WHERE id = ?");
            $stmt->execute([$_SESSION['user_id']]);
            $user = $stmt->fetch(PDO::FETCH_ASSOC);


            // Chargement des vÃ©hicules du user connectÃ©
            $stmt = $db->prepare("SELECT * FROM vehicles WHERE user_id = ?");
            $stmt->execute([$_SESSION['user_id']]);
            $vehicles = $stmt->fetchAll(PDO::FETCH_ASSOC);

            // Charger les trajets crÃ©Ã©s par l'utilisateur connectÃ© (chauffeur)
            $stmt = $db->prepare("SELECT t.*, v.brand, v.model, v.plate_number
                                  FROM trips t
                                  JOIN vehicles v ON t.vehicle_id = v.id
                                  WHERE t.user_id = ?
                                  ORDER BY t.departure_datetime DESC");
            $stmt->execute([$_SESSION['user_id']]);
            $trips = $stmt->fetchAll(PDO::FETCH_ASSOC);

            // Charger des trajets oÃ¹ l'utilisateur est passager
            $stmt = $db->prepare("
                SELECT t.*, tp.is_confirmed, u.firstname AS driver_firstname, v.brand, v.model
                FROM trip_participants tp
                JOIN trips t ON tp.trip_id = t.id
                JOIN users u ON t.user_id = u.id
                JOIN vehicles v ON t.vehicle_id = v.id
                WHERE tp.user_id = ?
                ORDER BY t.departure_datetime DESC
            ");

            $stmt->execute([$_SESSION['user_id']]);
            $joinedTrips = $stmt->fetchAll(PDO::FETCH_ASSOC);

    
        } catch (PDOException $e) {
            echo "Erreur de chargement du profil : " . $e->getMessage();
        }

            // Avis reÃ§us (en tant que conducteur)
            $stmt = $db->prepare("SELECT r.rating, r.content, u.firstname AS reviewer_name
                                  FROM reviews r
                                  JOIN users u ON r.reviewer_id = u.id
                                  WHERE r.driver_id = ?");
            $stmt->execute([$_SESSION['user_id']]);
            $reviews_received = $stmt->fetchAll(PDO::FETCH_ASSOC);

            // Calcul de la note moyenne du conducteur
            $stmt = $db->prepare("SELECT AVG(rating) FROM reviews WHERE driver_id = ?");
            $stmt->execute([$_SESSION['user_id']]);
            $avgDriverRating = $stmt->fetchColumn();

            // Avis donnÃ©s (en tant que passager)
            $stmt = $db->prepare("SELECT r.rating, r.content, u.firstname AS driver_name
                                  FROM reviews r
                                  JOIN users u ON r.driver_id = u.id
                                  WHERE r.reviewer_id = ?");
            $stmt->execute([$_SESSION['user_id']]);
            $reviews_given = $stmt->fetchAll(PDO::FETCH_ASSOC);

            // Calcul de la note moyenne en tant que passager
            $stmt = $db->prepare("SELECT AVG(rating) FROM reviews WHERE passenger_id = ?");
            $stmt->execute([$_SESSION['user_id']]);
            $avgPassengerRating = $stmt->fetchColumn();


        require 'views/profile.php';

    }

    public function editProfile() {
        if (empty($_SESSION['user_id'])) {
            header('Location: index.php?page=login');
            exit;
        }

        $db = connectDB();
        $error = '';
        $success = '';

        // Charger les infos actuelles de l'utilisateur
        $stmt = $db->prepare("SELECT firstname, lastname, email FROM users WHERE id = ?");
        $stmt->execute([$_SESSION['user_id']]);
        $user = $stmt->fetch(PDO::FETCH_ASSOC);

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $firstname = trim($_POST['firstname']);
            $lastname = trim($_POST['lastname']);
            $email = trim($_POST['email']);
            $password = $_POST['password'] ?? '';

            try {
                // prÃ©parer la requÃªte SQL
                if (!empty($password)) {
                    $hashed = password_hash($password, PASSWORD_DEFAULT);
                    $stmt = $db->prepare("UPDATE users SET firstname = ?, lastname = ?, email = ?, password = ? WHERE id = ?");
                    $stmt->execute([$firstname, $lastname, $email, $hashed, $_SESSION['user_id']]);
                } else {
                    $stmt = $db->prepare("UPDATE users SET firstname = ?, lastname = ?, email = ? WHERE id = ?");
                    $stmt->execute([$firstname, $lastname, $email, $_SESSION['user_id']]);
                }


                $success = "Profil mis Ã  jour avec succÃ¨s";

                // Mettre Ã  jour la session si prÃ©nom changÃ©
                $_SESSION['firstname'] = $firstname;

                // Ajouter le message flash et rediriger
                $_SESSION['flash_success'] = " Profil mis Ã  jour avec succÃ¨s.";
                header('Location: index.php?page=profile');
                exit;

            } catch (PDOException $e) {
                $error = "Erreur lors de la mise Ã  jour : " . $e->getMessage();
            }
        }
            
        require 'views/edit_profile.php';   

    }

    public function selectRole() {
        if (empty($_SESSION['user_id'])) {
            header('Location: index.php?page=login');
            exit;
        }

        $db = connectDB();

        // Charger les valeurs actuelles de l'utilisateur
        $stmt = $db->prepare("SELECT is_driver, is_passenger FROM users WHERE id = ?");
        $stmt->execute([$_SESSION['user_id']]);
        $user = $stmt->fetch(PDO::FETCH_ASSOC);

        if ($_SERVER['REQUEST_METHOD'] === 'POST'){
            // VÃ©rifie si les cases sont cochÃ©es
            $is_driver = isset($_POST['is_driver']) ? 1 : 0;
            $is_passenger = isset($_POST['is_passenger']) ? 1 : 0;

            // Mise Ã  jour dans la BDD
            $stmt = $db->prepare("UPDATE users SET is_driver = ?, is_passenger = ? WHERE id = ?");
            $stmt->execute([$is_driver, $is_passenger, $_SESSION['user_id']]);

            $_SESSION['flash_success'] = "Votre rÃ´le a bien Ã©tÃ© enregistrÃ©";
            header('Location: index.php?page=profile');
            exit;
        }

        require 'views/select_role.php';
    }

    public function addVehicle() {
        // VÃ©rifie si l'utilisateur est connectÃ© en consultant la session
        if (empty($_SESSION['user_id'])) {
            // Si non connectÃ©, redirige vers la page de connexion
            header('Location: index.php?page=login');
            exit;
        }

        // Connexion Ã  la base de donnÃ©es
        $db = connectDB();


        // Si le formulaire a Ã©tÃ© soumis en mÃ©thode POST
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            // PrÃ©pare une requÃªte SQL pour insÃ©rer un nouveau vÃ©hicule dans la base 
            $stmt = $db->prepare("INSERT INTO vehicles
            (user_id, brand, model, color, energy, plate_number, registration_date, seats, preferences)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)");

            // ExÃ©cute la requÃªte avec les donnÃ©es du formulaire et l'identifiant de l'utilisateur
            $stmt->execute([
                $_SESSION['user_id'],
                $_POST['brand'],
                $_POST['model'],
                $_POST['color'],
                $_POST['energy'],
                $_POST['plate_number'],
                $_POST['registration_date'],
                $_POST['seats'],
                $_POST['preferences']
            ]);

            // Message flash pour confirmer l'ajout du vÃ©hicule
            $_SESSION['flash_success'] = " VÃ©hicule ajoutÃ© avec succÃ¨s.";
           
            // Redirige vers la page de profil aprÃ¨s insertion
            header('Location: index.php?page=profile');
            exit;
        }

    // Si le formulaire n'a pas Ã©tÃ© soumis, on affiche la vue du formulaire
    require 'views/add_vehicle.php';

    }

    public function addTrip() {
        if (empty($_SESSION['user_id'])) {
            header('Location: index.php?page=login');
            exit;
        }

        $db = connectDB();

        // Charger les vÃ©hicules du chauffeur
        $stmt = $db->prepare("SELECT * FROM vehicles WHERE user_id = ?");
        $stmt->execute([$_SESSION['user_id']]);
        $vehicles = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if ($_SERVER['REQUEST_METHOD'] == 'POST') {
            // RÃ©cupÃ©ration des donnÃ©es du formulaire
            $departure_city = $_POST['departure_city'] ?? '';
            $arrival_city = $_POST['arrival_city'] ?? '';
            $departure_datetime = $_POST['departure_datetime'] ?? '';
            $arrival_datetime = $_POST['arrival_datetime'] ?? '';
            $vehicle_id = $_POST['vehicle_id'] ?? '';
            $seats_available = $_POST['seats_available'] ?? '';
            $price = $_POST['price'] ?? '';

            // Conversion au bon format DATETIME pour MySQL
            $departure_datetime = date('Y-m-d H:i:s', strtotime($departure_datetime));
            $arrival_datetime = date('Y-m-d H:i:s', strtotime($arrival_datetime));

            // PrÃ©paration et exÃ©cution de la requÃªte
            $stmt = $db->prepare("INSERT INTO trips
                (user_id, vehicle_id, departure_city, arrival_city, departure_datetime, arrival_datetime, seats_available, price)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)");

            $stmt->execute([
                $_SESSION['user_id'],
                $_POST['vehicle_id'],
                $_POST['departure_city'],
                $_POST['arrival_city'],
                $_POST['departure_datetime'],
                $_POST['arrival_datetime'],
                $_POST['seats_available'],
                $_POST['price'],
            ]);

            $_SESSION['flash_success'] = " Trajet crÃ©Ã© avec succÃ¨s.";
            header('Location: index.php?page=profile');
            exit;
            
        }

        require 'views/add_trip.php';
    }

    public function deleteTrip() {
        if (empty($_SESSION['user_id'])) {
            header('Location: index.php?page=login');
            exit;
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['trip_id'])) {
            $trip_id = $_POST['trip_id'];

            $db = connectDB();

            // Supprimer uniquement si l'utilisateur en est le propriÃ©taire
            $stmt = $db->prepare("DELETE FROM trips WHERE id = ? AND user_id = ?");
            $stmt->execute([$trip_id, $_SESSION['user_id']]);

            $_SESSION['flash_success'] = " Trajet supprimÃ© avec succÃ¨s.";            
        }

        header('Location: index.php?page=profile');
        exit;
    }

    public function editTrip() {
        if (empty($_SESSION['user_id'])) {
            header('Location: index.php?page=login');
            exit;
        }

        $db = connectDB();
        $trip_id = $_GET['id'] ?? null;

        // Charger le trajet actuel
        $stmt = $db->prepare("SELECT * FROM trips WHERE id = ? AND user_id = ?");
        $stmt->execute([$trip_id, $_SESSION['user_id']]);
        $trip = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$trip) {
            $_SESSION['flash_success'] = "Trajet introuvable.";
            header('Location: index.php?page=profile');
            exit;
        }

        // Si soumission du formulaire
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $departure_datetime = date('Y-m-d H:i:s', strtotime($_POST['departure_datetime']));
            $arrival_datetime = date('Y-m-d H:i:s', strtotime($_POST['arrival_datetime']));

            $stmt = $db->prepare("UPDATE trips SET departure_city = ?, arrival_city = ?, departure_datetime = ?, arrival_datetime = ?, seats_available = ?, price = ? WHERE id = ? AND user_id = ?");
            $stmt->execute([
                $_POST['departure_city'],
                $_POST['arrival_city'],
                $departure_datetime,
                $arrival_datetime,
                $_POST['seats_available'],
                $_POST['price'],
                $trip_id,
                $_SESSION['user_id']                
            ]);

            $_SESSION['flash_success'] = "Trajet modifiÃ© avec succÃ¨s.";
            header('Location: index.php?page=profile');
            exit;
        }

        // Afficher le formulaire
        require 'views/edit_trip.php';
    }
    public function participateTrip() {
        if (empty($_SESSION['user_id'])) {
            header('Location: index.php?page=login');
            exit;
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['trip_id'])) {
            $trip_id = intval($_POST['trip_id']);
            $user_id = $_SESSION['user_id'];

            $db = connectDB();

            try {
                // VÃ©rifie s'il reste des places
                $stmt = $db->prepare("SELECT seats_available FROM trips WHERE id = ?");
                $stmt->execute([$trip_id]);
                $trip = $stmt->fetch(PDO::FETCH_ASSOC);

                if (!$trip || $trip['seats_available'] <= 0) {
                    $_SESSION['flash_error'] = "DÃ©solÃ©, ce trajet est complet.";
                    header('Location: index.php?page=trip-details&id=' .$trip_id);
                    exit;
                }

                // VÃ©rifie si l'utilisateur est dÃ©jÃ  inscrit
                $stmt = $db->prepare("SELECT * FROM trip_participants WHERE trip_id = ? AND user_id = ?");
                $stmt->execute([$trip_id, $user_id]);
                if ($stmt->fetch()) {
                    $_SESSION['flash_error'] = "Vous Ãªtes dÃ©jÃ  inscrit Ã  ce trajet.";
                    header('Location: index.php?page=trip-details&id=' . $trip_id);
                    exit;
                }

                // VÃ©rifie si l'utilisateur a au moins 1 crÃ©dit
                $stmt = $db->prepare("SELECT credits FROM users WHERE id = ?");
                $stmt->execute([$user_id]);
                $user = $stmt->fetch(PDO::FETCH_ASSOC);

                if ($user['credits'] <= 0) {
                    $_SESSION['flash_error'] = "Vous n'avez pas assez de crÃ©dits pour participer Ã  ce trajet.";
                    header('Location: index.php?page=search');
                    exit;
                }

                // Inscription Ã  un trajet
                $stmt = $db->prepare("INSERT INTO trip_participants (trip_id, user_id) VALUES (?, ?)");
                $stmt->execute([$trip_id, $user_id]);

                // Mise Ã  jour du nombre de places
                $stmt = $db->prepare("UPDATE trips SET seats_available = seats_available - 1 WHERE id = ?");
                $stmt->execute([$trip_id]);

                // DÃ©crÃ©menter 1 crÃ©dit au passager
                $stmt = $db->prepare("UPDATE users SET credits = credits - 1 WHERE id = ?");
                $stmt->execute([$user_id]);

                $_SESSION['flash_success'] = "Vous Ãªtes inscrit Ã  ce trajet";
                header('Location: index.php?page=trip-details&id=' . $trip_id);
                exit;
                
            } catch (PDOException $e) {
                $_SESSION['flash_error'] = "Erreur de base de donnÃ©es : " . $e->getMessage();
                header('Location: index.php?page=trip-details&id=' . $trip_id);
                exit;
            }
        } else {
            $_SESSION['flash_error'] = "RequÃªte invalide.";
            header('Location: index.php?page=search');
            exit;
        }
    }
    
    public function rateDriver() {
        // VÃ©rifie si l'utilisateur est connectÃ©
        if (empty($_SESSION['user_id'])) {
            header('Location: index.php?page=login');
            exit;
        }

        // VÃ©rifie que le formulaire est bien en POST
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $trip_id = $_POST['trip_id'] ?? null;
            $driver_id = $_POST['driver_id'] ?? null;
            $rating = $_POST['rating'] ?? null;
            $content = trim($_POST['content'] ?? '');
            $reviewer_id = $_SESSION['user_id'];

        // Validation basique : tous les champs sont obligatoires
        if (!$trip_id || !$driver_id || !$rating || empty($content)) {
            $_SESSION['flash_error'] = "Tous les champs sont obligatoires.";
            header('Location: index.php?page=trip-details&id=' . $trip_id);
            exit;
        }

        $db = connectDB();

        try {
            // InsÃ©rer la note
            $passenger_id = $reviewer_id;
            $stmt = $db->prepare("INSERT INTO reviews (trip_id, reviewer_id, driver_id, passenger_id, rating, content, created_at) VALUES (?, ?, ?, ?, ?, ?, NOW())");
            $stmt->execute([$trip_id, $reviewer_id, $driver_id, $passenger_id, $rating, $content]);


            // Ajouter 10 crÃ©dits au passager qui a notÃ©
            $stmt = $db->prepare("UPDATE users SET credits = credits + 10 WHERE id = ?");
            $stmt->execute([$reviewer_id]);

            // SuccÃ¨s
            $_SESSION['flash_success'] = "Merci pour votre avis ! Vous avez gagnÃ© 10 crÃ©dits.";
            header('Location: index.php?page=profile');
            exit;
        } catch (PDOException $e) {
            $_SESSION['flash_error'] = "Erreur : " . $e->getMessage();
            header('Location: index.php?page=trip-details&id=' . $trip_id);
            exit;
        }

        }  
 
    }

    public function ratePassenger() {
        if (empty($_SESSION['user_id'])) {
            header('Location: index.php?page=login');
            exit;
        }

            if ($_SERVER['REQUEST_METHOD'] === 'POST') {
                $trip_id = $_POST['trip_id'] ?? null;
                $passenger_id = $_POST['passenger_id'] ?? null;
                $rating = $_POST['rating'] ?? null;
                $content = trim($_POST['content'] ?? '');
                $reviewer_id = $_SESSION['user_id'];

                // Validation
                if (!$trip_id || !$passenger_id || !$rating || empty($content)) {
                    $_SESSION['flash_error'] = "Tous les champs sont obligatoires";
                    header('Location: index.php?page=trip-details&id=' . $trip_id);
                    exit;
                }

                // VÃ©rifie que le passager a bien participÃ©

                try {

                $db = connectDB();

                $stmt = $db->prepare("SELECT * FROM trip_participants WHERE trip_id = ? AND user_id = ?");
                $stmt->execute([$trip_id, $passenger_id]);
                if (!$stmt->fetch()) {
                    $_SESSION['flash_error'] = "Ce passager n'a pas participÃ© Ã  ce trajet.";
                    header('Location: index.php?page=trip-details&id=' . $trip_id);
                    exit;
                }

                // Insertion de l'avis
                $stmt = $db->prepare("INSERT INTO reviews (trip_id, reviewer_id, passenger_id, rating, content, created_at) VALUES (?, ?, ?, ?, ?, NOW())");
                $stmt->execute([$trip_id, $reviewer_id, $passenger_id, $rating, $content]);

                // RÃ©compense : le conducteur gagne 5 crÃ©dits 
                $stmt = $db->prepare("UPDATE users SET credits = credits + 5 WHERE id = ?");
                $stmt->execute([$reviewer_id]);

                $_SESSION['flash_success'] = "Avis enregistrÃ© avec succÃ¨s.";
                header('Location: index.php?page=trip-details&id=' . $trip_id);
                exit;
                
            } catch (PDOException $e) {
                $_SESSION['flash_error'] = "Erreur : " . $e->getMessage();
                header('Location: index.php?page=profile');
                exit;
            }
        }
    }

    public function cancelParticipation()
    {
        if (empty($_SESSION['user_id'])) {
            header('Location: index.php?page=login');
            exit;
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST' && !empty($_POST['trip_id'])) {
            $trip_id = $_POST['trip_id'];
            $user_id = $_SESSION['user_id'];

            $db = connectDB();

            // Supprimer la ligne de participation
            $stmt = $db->prepare("DELETE FROM trip_participants WHERE user_id = ? AND trip_id = ?");
            $success = $stmt->execute([$user_id, $trip_id]);

            if ($success) {
                $_SESSION['flash_success'] = " Vous avez annulÃ© votre participation au trajet.";
            } else {
                $_SESSION['flash_error'] = "Erreur lors de l'annulation.";
            }
        }

        header('Location: index.php?page=profile');
        exit;
        }

    public function startTrip() {
        if (empty($_SESSION['user_id'])) {
            $_SESSION['flash_error'] = "Vous devez Ãªtre connectÃ© pour dÃ©marer un trajet.";
            header('Location: index.php?page=login');
            exit;
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $trip_id = $_POST['trip_id'] ?? null;

            if ($trip_id) {
                $db = connectDB();

                // VÃ©rifier que l'utilisateur est bien le conducteur
                $stmt = $db->prepare("SELECT * FROM trips WHERE id = ? AND user_id = ?");
                $stmt->execute([$trip_id, $_SESSION['user_id']]);
                $trip = $stmt->fetch();

                if ($trip) {
                    // Mettre Ã  jour le champ is_started
                    $stmt = $db->prepare("UPDATE trips SET is_started = 1 WHERE id = ?");
                    $stmt->execute([$trip_id]);

                    $_SESSION['flash_success'] = "Trajet dÃ©marrÃ© avec succÃ¨s.";
                    header("Location: index.php?page=profile");
                    exit;
                } else {
                    $_SESSION['flash_error'] = "Vous n'Ãªtes pas autorisÃ© Ã  dÃ©marrer ce trajet.";
                }
            } else {
                $_SESSION['flash_error'] = "Trajet introuvable.";
            }

            header("Location: index.php?page=profile");
            exit;
                }
            }

    public function completeTRip() {
        if (empty($_SESSION['user_id'])) {
            $_SESSION['flash_error'] = "Connexion requise.";
            header("Location: index.php?page=login");
            exit;
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $trip_id = $_POST['trip_id'] ?? null;

            if ($trip_id) {
                $db = connectDB();

                // VÃ©rifie que l'utilisateur est bien le conducteur
                $stmt = $db->prepare("SELECT * FROM trips WHERE id = ? AND user_id = ?");
                $stmt->execute([$trip_id, $_SESSION['user_id']]);
                $trip = $stmt->fetch();

                if ($trip) {
                    // Mettre Ã  jour le trajet comme terminÃ©
                    $stmt = $db->prepare("UPDATE trips SET is_completed = 1 WHERE id = ?");
                    $stmt->execute([$trip_id]);

                    $_SESSION['flash-success'] = "Trajet terminÃ© avec succÃ¨s.";
                } else {
                    $_SESSION['flash_error'] = "Action non autorisÃ©e pour ce trajet.";
                }
            } else {
                $_SESSION['flash_error'] = "Identifiant du trajet manquant.";
            }

                // AprÃ¨s avoir mis Ã  jour le statut du trajet :
                $stmt = $db->prepare("UPDATE trips SET is_completed = 1 WHERE id = ?");
                $stmt->execute([$trip_id]);

                // RÃ©cupÃ©ration des passagers
                $stmt = $db->prepare("
                    SELECT u.email, u.firstname
                    FROM trip_participants tp
                    JOIN users u ON tp.user_id = u.id
                    WHERE tp.trip_id = ?
                ");
                $stmt->execute([$trip_id]);
                $passengers = $stmt->fetchAll(PDO::FETCH_ASSOC);

                // Envoi de mail Ã  chaque passager
                foreach ($passengers as $p) {
                    $to = $p['email'];
                    $subject = "Confirmation du trajet terminÃ©";
                    $message = "Bonjour " . htmlspecialchars($p['firstname']) . ",\n\nLe covoiturage auquel vous avez participÃ© est terminÃ©.\n\nMerci de vous rendre dans votre espace personnel pour confirmer que tout s'est bien passÃ©, laisser une note et un avis.\n\n Merci pour votre confiance.\n\nL'Ã©quipe EcoRide";
                    
                    // Pour tester en local avec MAMP, Ã©crire dans un fichier plutÃ´t qu'envoyer vraiment
                    // file_put_contents('emails/debut_mail_' .uniqid() . '.txt', $message);

                    mail($to, $subject, $message); // A activer uniquement si le serveur est prÃªt Ã  envoyer des mails
                }

                $_SESSION['flash_success'] = "Trajet marquÃ© comme temrinÃ©. Des emails ont Ã©tÃ© envoyÃ©s aux passagers.";
                header('Location: index.php?page=profile');
                exit;



        }

        header("Location: index.php?page=profile");
        exit;
        }

    public function confirmTrip() {
        if (empty($_SESSION['user_id'])) {
            header('Location: index.php?page=login');
            exit;
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $trip_id = $_POST['trip_id'] ?? null;
            $status = $_POST['status'] ?? null;
            $user_id = $_SESSION['user_id'];

            if (!$trip_id || !$status) {
                $_SESSION['flash_error'] = "Informations manquantes.";
                header('Location: index.php?page=profile');
                exit;
            }

            $db = connectDB();

            // Mise Ã  jour de la confirmation dans la table trip_participants
            $stmt = $db->prepare("UPDATE trip_participants SET is_confirmed = ? WHERE trip_id = ? AND user_id = ?");
            $is_confirmed = ($status === 'ok') ? 1 : -1;
            $stmt->execute([$is_confirmed, $trip_id, $user_id]);

            // Si c'Ã©tait une validation positive, on crÃ©dite le conducteur
            if ($is_confirmed === 1) {
                // On rÃ©cupÃ¨re l'ID du conducteur et le prix du trajet
                $stmt = $db->prepare("SELECT t.user_id AS driver_id, t.price FROM trips t WHERE t.id = ?");
                $stmt->execute([$trip_id]);
                $trip = $stmt->fetch(PDO::FETCH_ASSOC);

                if ($trip) {
                    $stmt = $db->prepare("UPDATE users SET credits = credits + ? WHERE id = ?");
                    $stmt->execute([$trip['price'], $trip['driver_id']]);
                }
            }

            $_SESSION['flash_success'] = "Merci pour votre retour sur le trajet.";
            header('Location: index.php?page=profile');
            exit;
        }

        http_response_code(405);
        echo "Methode non autorisÃ©e.";
    }

    public function employeeDashboard() {
        if (empty($_SESSION['user_id'])) {
            header('Location: index.php?page=login');
            exit;   
        }

        $db = connectDB();

        // VÃ©rifie que c'est bien un employÃ©
        $stmt = $db->prepare("SELECT is_employee FROM users WHERE id = ?");
        $stmt->execute([$_SESSION['user_id']]);
        $user = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$user || $user['is_employee'] != 1) {
            $_SESSION['flash_error'] = "AccÃ¨s Interdit.";
            header('Location: index.php?page=profile');
            exit;
        }

        // Avis Ã  valider
        $stmt = $db->query("
            SELECT r.*, u.firstname AS reviewer_name, t.id AS trip_id
            FROM reviews r
            JOIN users u ON r.reviewer_id = u.id
            JOIN trips t ON r.trip_id = t.id
            WHERE r.status = 'pending'
        ");
        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

        // Trajets problÃ©matiques
        $stmt = $db->query("
            SELECT t.*, d.firstname AS driver_firstname, p.firstname AS passenger_firstname, p.email AS passenger_email
            FROM trips t
            JOIN users d ON t.user_id = d.id
            JOIN trip_participants tp ON tp.trip_id = t.id
            JOIN users p ON tp.user_id = p.id
            WHERE tp.is_confirmed = -1
        ");
        $problems = $stmt->fetchAll(PDO::FETCH_ASSOC);

        // Historique des avis modÃ©rÃ©s (validÃ©s ou rejetÃ©s)
        $stmt = $db->query("
            SELECT r.*, u.firstname AS reviewer_name, t.id AS trip_id
            FROM reviews r
            JOIN users u ON r.reviewer_id = u.id
            JOIN trips t ON r.trip_id = t.id
            WHERE r.status IN ('approved', 'rejected')
            ORDER BY r.created_at DESC
        ");
        $moderated_reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

        // Obligatoire pour pouvoir afficher la vue
        require 'views/employee_dashboard.php';
    }

    public function validateReview() {
        if (!empty($_SESSION['user_id'])) {
            header('Location: index.php?page=login');
            exit;
        }

        $db = connectDB();

        // VÃ©rifie que l'utilisateur est bien un employÃ©
        $stmt = $db->prepare("SELECT is_employee FROM users WHERE id = ?");
        $stmt->execute([$_SESSION['user_id']]);
        $user = $stmt->fetch(PDO::FETCH_ASSOC);
        
        if (!$user || $user['is_employee'] != 1) {
            $_SESSION['flash_error'] = "AcccÃ¨s Interdit.";
            header('Location: index.php?page=profile');
            exit;
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $review_id = $_POST['review_id'] ?? null;
            $action = $_POST['action'] ?? null;

            if (!$review_id || !in_array($action, ['approve', 'reject'])) {
                $_SESSION['flash_error'] = "DonnÃ©es invalides.";
                header('Location: index.php?page=employee-dashboard');
                exit;
            }

            $status = ($action === 'approve') ? 'approved' : 'rejected';

            $stmt = $db->prepare("UPDATE reviews SET status = ? WHERE id = ?");
            $stmt->execute([$status, $review_id]);

            $_SESSION['flash_success'] = "Avis mis Ã  jour avec succÃ¨s.";
            header('Location: index.php?page=employee-dashboard');
            exit;
        }

        http_response_code(485);
        echo "Methode non autorisÃ©e";
        }

    public function moderateReview() {
    if (empty($_SESSION['user_id'])) {
        header('Location: index.php?page=moderate-review');
        exit;
    }

    $db = connectDB();

    // VÃ©rifie que câ€™est bien un employÃ©
    $stmt = $db->prepare("SELECT is_employee FROM users WHERE id = ?");
    $stmt->execute([$_SESSION['user_id']]);
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user || $user['is_employee'] != 1) {
        $_SESSION['flash_error'] = "AccÃ¨s interdit.";
        header('Location: index.php?page=profile');
        exit;
    }

    // VÃ©rifie les donnÃ©es du formulaire
    $review_id = $_POST['review_id'] ?? null;
    $action = $_POST['action'] ?? null;

    if (!$review_id || !in_array($action, ['approve', 'reject'])) {
        $_SESSION['flash_error'] = "DonnÃ©es invalides.";
        header('Location: index.php?page=employee-dashboard');
        exit;
    }

    // Met Ã  jour le statut de l'avis
    $status = ($action === 'approve') ? 'approved' : 'rejected';
    $stmt = $db->prepare("UPDATE reviews SET status = ? WHERE id = ?");
    $stmt->execute([$status, $review_id]);

    $_SESSION['flash_success'] = "Avis mis Ã  jour.";
    header('Location: index.php?page=employee-dashboard');
    exit;

}

    public function adminDashboard() {
        if (empty($_SESSION['user_id'])) {
            header('Location: index.php?page=profile');
            exit;
        }

        $db = connectDB();

        // VÃ©rifie que l'utilisateur est admin
        $stmt = $db->prepare("SELECT is_admin FROM users WHERE id = ?");
        $stmt->execute([$_SESSION['user_id']]);
        $user = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$user || $user['is_admin'] != 1) {
            $_SESSION['flash_error'] = "AccÃ¨s interdit.";
            header('Location: index.php?page=admin-dashboard');
            exit;
        }

        // Liste des employÃ©s
        $stmt = $db->prepare("SELECT firstname, lastname, email FROM users WHERE is_employee = 1");
        $stmt->execute();
        $employees = $stmt->fetchAll(PDO::FETCH_ASSOC);

        // Liste des utilisateurs (pour suspension)
        $stmt = $db->query("SELECT * FROM users WHERE is_admin = 0");
        $users = $stmt->fetchAll(PDO::FETCH_ASSOC);

        // Statistiques : trajets par jour
        $stmt = $db->query("
            SELECT DATE(departure_datetime) AS date, COUNT(*) AS count
            FROM trips
            GROUP BY DATE(departure_datetime)
            ORDER BY DATE(departure_datetime) DESC
        ");
        $tripsPerDay = $stmt->fetchAll(PDO::FETCH_ASSOC);

        // Statistiques : total des crÃ©dits gagnÃ©s
        $stmt = $db->query("SELECT SUM(credits) AS total_credits FROM users");
        $creditsData = $stmt->fetch(PDO::FETCH_ASSOC);
        $totalCredits = $creditsData['total_credits'] ?? 0;

        require 'views/admin_dashboard.php';
    }
    
    public function createEmployee() {
        if (empty($_SESSION['user_id']) || empty($_SESSION['is_admin'])) {
            $_SESSION['flash_error'] = "AccÃ¨s interdit.";
            header('Location: index.php?page=login');
            exit;
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $firstname = trim($_POST['firstname'] ?? '');
            $lastname = trim($_POST['lastname'] ?? '');
            $email = trim($_POST['email'] ?? '');
            $password = $_POST['password'] ?? '';

            if (!$firstname || !$lastname || !$email || !$password) {
                $_SESSION['flash_error'] = "Tous les champs sont obligatoires.";
                header('Location: index.php?page=create-employee');
                exit;
            }

            $db = connectDB();

            // VÃ©rifie que l'email n'est pas dÃ©jÃ  utilisÃ©e
            $stmt = $db->prepare("SELECT id FROM users WHERE email = ?");
            $stmt->execute([$email]);
            $existingUser = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($existingUser) {

                // Met Ã  jour le rÃ´le en employÃ©
                $stmt = $db->prepare("UPDATE users SET is_employee = 1 WHERE id = ?");
                $stmt->execute([$existingUser['id']]);
                $_SESSION['flash_success'] = "Utilisateur existant promu au rÃ´le employÃ©.";
                header('Location: index.php?page=admin-dashboard');
                exit;
            }

            // Sinon, crÃ©er un nouvel employÃ©
            $stmt = $db->prepare("INSERT INTO users (firstname, lastname, email, password, is_employee) VALUES (?, ?, ?, ?, 1)");
            $hashedPassword = password_hash($password, PASSWORD_DEFAULT);
            $stmt->execute([$firstname, $lastname, $email, $hashedPassword]);

            $_SESSION['flash_success'] = "Compte employÃ© crÃ©Ã© avec succÃ¨s.";
            header('Location: index.php?page=admin-dashboard');
            exit;
        }

        require 'views/create_employee.php';
    }

    public function suspendUser() {
        if (empty($_SESSION['user_id']) || empty($_SESSION['is_admin'])) {
            $_SESSION['flash_error'] = "AccÃ¨s interdit.";
            header('Location: index.php?page=login');
            exit;
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $userId = $_POST['user_id'] ?? null;

            if ($userId) {
                $db = connectDB();
                $stmt = $db->prepare("UPDATE users SET is_suspended = 1 WHERE id = ?");
                $stmt->execute([$userId]);
                $_SESSION['flash_success'] = "Utilisateur suspendu.";
            }
        }

        header('Location: index.php?page=admin-dashboard');
        exit;
    }

    public function unsuspendUser() {
        if (empty($_SESSION['is_admin'])) {
            $_SESSION['flash_error'] = "AccÃ¨s interdit.";
            header('Location: index.php?page=login');
            exit;
        }

        $user_id = $_POST['user_id'] ?? null;
        if (!$user_id) {
            $_SESSION['flash_error'] = "Utilisateur invalide.";
            header('Location: index.php?page=admin-dashboard');
            exit;
        }

        $db = connectDB();
        $stmt = $db->prepare("UPDATE users SET is_suspended = 0 WHERE id = ?");
        $stmt->execute([$user_id]);

        $_SESSION['flash_success'] = "Utilisateur rÃ©activÃ©.";
        header('Location: index.php?page=admin-dashboard');
        exit;
}


}


    



